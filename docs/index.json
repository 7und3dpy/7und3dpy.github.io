[{"categories":["C","Python"],"content":"This article shows the solution of Hackerrank challenges.","date":"2023-12-10","objectID":"/projecteuler1/","tags":["Hackerrank","ProjectEuler"],"title":"Project Euler 1: Multiples of 3 and 5","uri":"/projecteuler1/"},{"categories":["C","Python"],"content":"This problem is a programming version of Problem 1 from projecteuler.net If we list all the natural numbers below $10$ that are multiples of $3$ or $5$ , we get $3$, $5$, $6$ and $9$. The sum of these multiples is $23$. Find the sum of all the multiples of $3$ or $5$ below $N$. Input Format First line contains $T$ that denotes the number of test cases. This is followed by $T$ lines, each containing an integer, $N$. Constraints \\(1 \\leq T \\leq 10^5\\) \\(1 \\leq N \\leq 10^9 \\) Output Format For each test case, print an integer that denotes the sum of all the multiples of $3$ or $5$ below $N$ Sample Input 0 2 10 100 Sample Output 0 23 2318 Explaination 0 For $N=10$, if we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3$, $5$, $6$ and $9$. The sum of these multiples is $23$. Similarly for $N = 100$, we get $2318$ Code #include \u003cmath.h\u003e #include \u003cstdio.h\u003e #include \u003cstring.h\u003e #include \u003cstdlib.h\u003e #include \u003cassert.h\u003e #include \u003climits.h\u003e #include \u003cstdbool.h\u003e int main(){ int t; scanf(\"%d\",\u0026t); for(int a0 = 0; a0 \u003c t; a0++){ int n; scanf(\"%d\",\u0026n); int sum_1 = 0 , sum_2 = 0; for (int num_ = 3; num_ \u003c n; num_++){ //num_ mean the number that are multiples of 3 or 5 if (num_ % 3 == 0 || num_ % 5 == 0){ if (num_ % 15 == 0){ sum_2 += num_; } printf(\"%d\\n\", num_); sum_1 += num_; } } printf(\"%d\\n\", sum_1 - sum_2); } return 0; } import math import os import random import re import sys if __name__ == '__main__': t = int(input().strip()) for t_itr in range(t): n = int(input()) n1 = (n - 1)//3 n2 = (n - 1)//5 n3 = (n - 1)//15 print(3*n1*(n1+1)//2 + 5*n2*(n2+1)//2 - 15*n3*(n3+1)//2) Explaination Let takes an example $N = 10$ There are some integers that satisfy the conditional problem like 3, 5, 6 and 9 Takes as a sum: $3 + 6 + 9 = 3(1 + 2 + 3)$ which equal to this sum formula $3 \\times frac{n(n + 1)}{2}$ where $n$ is the total number satisfying this condition $n$ can computed by get the input number then substract $1$ and divide the multiply of number that satisfied the problem to get the quotient Since 15 is both the multiplies of 3 and 5 there is a redundancy, so that we need to substract total sum of the multiply of 15 ","date":"2023-12-10","objectID":"/projecteuler1/:0:0","tags":["Hackerrank","ProjectEuler"],"title":"Project Euler 1: Multiples of 3 and 5","uri":"/projecteuler1/"},{"categories":["C","Python"],"content":"This article shows the solution of Hackerrank challenges.","date":"2023-12-11","objectID":"/projecteuler3/","tags":["Hackerrank","ProjectEuler"],"title":"Project Euler 3: Largest prime factor","uri":"/projecteuler3/"},{"categories":["C","Python"],"content":"The prime factor of $13195$ are $5, 7, 13$ and $29$ What is the largest prime factor of a given number $N$ ? Input Format First line contains $T$, the number of test cases. This is followed by $T$ lines each containing an integer $N$ Constraints $1 \\leq T \\leq 10$ $10 \\leq N \\leq 10^12$ Output format For each test case, display the larget prime factor of $N$ Sample Input 0 2 10 17 Sample Output 0 5 17 Explaination 0 Prime factors of $10$ are ${2,5}$, largest is $5$ Prime factor of $17$ is $17$ itself, hence largest is $17$ Solution Explaination Thuật toán $\\mathcal{O}(\\sqrt{N})$ Phương pháp cơ bản ở đây là duyệt dãy số nguyên tố: \\[P = {2,3,5,7,11,17,…}\\] để tìm ước số nguyên tố của $N$. Thông thường phương pháp như vậy rất tốn kém bộ nhớ, thường sử dụng Sàng Eratosthenes. Do đó, ta sẽ duyệt qua một dãy $Q[1,2,…,] = {q_1,q_2,…}$ dễ sinh hơn dãy $P$ sao cho $P \\subseteq Q$ ($Q$ có thể chứa hợp số) \\[Q[1,2,…] = {2,3,5,7,11,13,17,19, 23, 25, 29, 31, 35, 37, 41…} \\hspace{1cm} (1)\\] Ngoại trừ 2 dãy số đầu tiên, dãy $Q$ có khoảng cách giữa hai số liền kề nhau thay đổi liên tục giữa 2 và 4. Mã giả như sau: ","date":"2023-12-11","objectID":"/projecteuler3/:0:0","tags":["Hackerrank","ProjectEuler"],"title":"Project Euler 3: Largest prime factor","uri":"/projecteuler3/"},{"categories":["C","Python"],"content":"This article shows the solution of Hackerrank challenges.","date":"2023-12-11","objectID":"/projecteuler2/","tags":["Hackerrank","ProjectEuler"],"title":"Project Euler 2: Even Fibonacci numbers","uri":"/projecteuler2/"},{"categories":["C","Python"],"content":"This article shows the solution of Hackerrank challenges. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be: \\[1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …\\] By considering the terms in the Fibonacci sequence whose values do not exceed $N$. Find the sum of the even-valued terms Input Format First line contain $T$ that denotes the number of test cases. This is followed by $T$ lines, containing an integer, $N$ Constraints $1 \\leq T \\leq 10^5$ $10 \\leq N \\leq 4 \\times 10^6$ Output Format Print the required answer for each test case Sample Input 0 2 10 100 Sample Output 0 10 44 Explaination 0 For $N = 10$, we have ${2, 8}$, sum is $10$ For $N = 100$, we have ${2, 8, 34}$, sum is $44$ Solution #include \u003cmath.h\u003e #include \u003cstdio.h\u003e #include \u003cstring.h\u003e #include \u003cstdlib.h\u003e #include \u003cassert.h\u003e #include \u003climits.h\u003e #include \u003cstdbool.h\u003e void fibo_even(long long n){ long long start = 2; //start of the fibonacci even number long long saved_start = 0; long long sum = 0; while (start \u003c n){ sum += start; long long temp = start; if (start * 4 + saved_start \u003e n) break; start = start * 4 + saved_start; saved_start = temp; } printf(\"%lld\\n\",sum); } int main(){ int t; scanf(\"%d\",\u0026t); for(int a0 = 0; a0 \u003c t; a0++){ long long n; scanf(\"%lld\",\u0026n); fibo_even(n); } return 0; } Explaination $1, 2, 3, 5, 8, 21, 34, 35, 89, 144, 233, 377, 610, …$ We have: $2 \\times 4 = 8$ $8 \\times 4 + 2 = 34$ $34 \\times 4 + 8 = 144$ $144 \\times 4 + 34 = 610$ In general: $F(n) = 4F(n - 1) + F(n - 2)$ ","date":"2023-12-11","objectID":"/projecteuler2/:0:0","tags":["Hackerrank","ProjectEuler"],"title":"Project Euler 2: Even Fibonacci numbers","uri":"/projecteuler2/"},{"categories":["code"],"content":"This article shows the concept of Pointer and how it works.","date":"2023-11-11","objectID":"/pointerp1/","tags":["Pointer","C"],"title":"CHAPTER 1: What is a pointer?","uri":"/pointerp1/"},{"categories":["code"],"content":"This article shows the concept of Pointer and how it works P1. One of those things beginners in C find difficult is the concept of pointers. The purpose of this tutorial is to provide an introduction to pointers and their use to these beginners. I have found that often the main reason beginners have a problem with pointers is that they have a weak or minimal feeling for variables, (as they are used in C). Thus we start with a discussion of C variables in general. A variable in a program is something with a name, the value of which can vary. The way the compiler and linker handles this is that it assigns a specific block of memory within the computer to hold the value of that variable. The size of that block depends on the range over which the variable is allowed to vary. For example, on 32 bit PC’s the size of an integer variable is 4 bytes. On older 16 bit PCs integers were 2 bytes. In C the size of a variable type such as an integer need not be the same on all types of machines. Further more there is more than one type of integer variable in C. We have integers, long integers and short integers which you can read up on in any basic text on C. This document assumes the use of a 32 bit system with 4 byte integers. If you want to know the size of the various types of integers on your system, running the following code will give you that information. #include \u003cstdio.h\u003e int main() { printf(\"size of a short is %d\\\\n\", sizeof(short)); printf(\"size of a int is %d\\\\n\", sizeof(int)); printf(\"size of a long is %d\\\\n\", sizeof(long)); } When we declare a variable we inform the compiler of two things, the name of the variable and the type of the variable. For example, we declare a variable of type integer with the name k by writing: int k; On seeing the “int” part of this statement the compiler sets aside 4 bytes of memory (on a PC) to hold the value of the integer. It also sets up a symbol table. In that table it adds the symbol k and the relative address in memory where those 4 bytes were set aside. Thus, later if we write: k = 2; we expect that, at run time when this statement is executed, the value 2 will be placed in that memory location reserved for the storage of the value of k. In C we refer to a variable such as the integer k as an “object”. In a sense there are two “values” associated with the object k. One is the value of the integer stored there (2 in the above example) and the other the “value” of the memory location, i.e., the address of k. Some texts refer to these two values with the nomenclature rvalue (right value, pronounced “are value”) and lvalue (left value, pronounced “el value”) respectively. In some languages, the lvalue is the value permitted on the left side of the assignment operator ‘=’ (i.e. the address where the result of evaluation of the right side ends up). The rvalue is that which is on the right side of the assignment statement, the 2 above. Rvalues cannot be used on the left side of the assignment statement. Thus: 2 = k; is illegal. Actually, the above definition of “lvalue” is somewhat modified for C. According to K\u0026R II (page 197): [1] “An object is a named region of storage; an lvalue is an expression referring to an object.” However, at this point, the definition originally cited above is sufficient. As we become more familiar with pointers we will go into more detail on this. Okay, now consider: int j, k; k = 2; j = 7; \u003c-- line 1 k = j; \u003c-- line 2 In the above, the compiler interprets the j in line 1 as the address of the variable j (its lvalue) and creates code to copy the value 7 to that address. In line 2, however, the j is interpreted as its rvalue (since it is on the right hand side of the assignment operator ‘=’). That is, here the j refers to the value stored at the memory location set aside for j, in this case 7. So, the 7 is copied to the address designated by the lvalue of k. In all of these examples, we are using 4 byte integers so all copying of rvalues from one storage location to the","date":"2023-11-11","objectID":"/pointerp1/:0:0","tags":["Pointer","C"],"title":"CHAPTER 1: What is a pointer?","uri":"/pointerp1/"},{"categories":["code"],"content":"References for Chapter 1: “The C Programming Language” 2nd Edition B. Kernighan and D. Ritchie Prentice Hall ISBN 0-13-110362-8 https://stackoverflow.com/questions/4318881/in-c-what-does-a-variable-declaration-with-two-asterisks-mean https://beginnersbook.com/2014/01/c-pointer-to-pointer/ ","date":"2023-11-11","objectID":"/pointerp1/:0:1","tags":["Pointer","C"],"title":"CHAPTER 1: What is a pointer?","uri":"/pointerp1/"},{"categories":["code"],"content":"This article shows the concept of Pointer and how it works.","date":"2023-11-11","objectID":"/pointerp2/","tags":["Pointer","C"],"title":"CHAPTER 2: Pointer types and Arrays","uri":"/pointerp2/"},{"categories":["code"],"content":"This article shows the concept of Pointer and how it works P2. Okay, let’s move on. Let us consider why we need to identify the type of variable that a pointer points to, as in: int *ptr; One reason for doing this is so that later, once ptr “points to” something, if we write: *ptr = 2; the compiler will know how many bytes to copy into that memory location pointed to by ptr. If ptr was declared as pointing to an integer, 4 bytes would be copied. Similarly for floats and doubles the appropriate number will be copied. But, defining the type that the pointer points to permits a number of other interesting ways a compiler can interpret code. For example, consider a block in memory consisting if ten integers in a row. That is, 40 bytes of memory are set aside to hold 10 integers. Now, let’s say we point our integer pointer ptr at the first of these integers. Furthermore lets say that integer is located at memory location 100 (decimal). What happens when we write: ptr + 1; Because the compiler “knows” this is a pointer (i.e. its value is an address) and that it points to an integer (its current address, 100, is the address of an integer), it adds 4 to ptr instead of 1, so the pointer “points to” the next integer, at memory location 104. Similarly, were the ptr declared as a pointer to a short, it would add 2 to it instead of 1. The same goes for other data types such as floats, doubles, or even user defined data types such as structures. This is obviously not the same kind of “addition” that we normally think of. In C it is referred to as addition using “pointer arithmetic”, a term which we will come back to later. Similarly, since ++ptr and ptr++ are both equivalent to ptr + 1 (though the point in the program when ptr is incremented may be different), incrementing a pointer using the unary ++ operator, either pre- or post-, increments the address it stores by the amount sizeof(type) where “type” is the type of the object pointed to. (i.e. 4 for an integer). Since a block of 10 integers located contiguously in memory is, by definition, an array of integers, this brings up an interesting relationship between arrays and pointers. Consider the following: int my_array[] = {1,23,17,4,-5,100}; Here we have an array containing 6 integers. We refer to each of these integers by means of a subscript to my_array, i.e. using my_array[0] through my_array[5]. But, we could alternatively access them via a pointer as follows: int *ptr; ptr = \u0026my_array[0]; /* point our pointer at the first integer in our array */ And then we could print out our array either using the array notation or by dereferencing our pointer. The following code illustrates this: ----------- Program 2.1 ----------------------------------- /* Program 2.1 from PTRTUT10.HTM 6/13/97 */ #include \u003cstdio.h\u003e int my_array[] = {1,23,17,4,-5,100}; int *ptr; int main(void) { int i; ptr = \u0026my_array[0]; /* point our pointer to the first element of the array */ printf(\"\\n\\n\"); for (i = 0; i \u003c 6; i++) { printf(\"my_array[%d] = %d \",i,my_array[i]); /*\u003c-- A */ printf(\"ptr + %d = %d\\n\",i, *(ptr + i)); /*\u003c-- B */ } return 0; } Compile and run the above program and carefully note lines A and B and that the program prints out the same values in either case. Also observe how we dereferenced our pointer in line B, i.e. we first added i to it and then dereferenced the new pointer. Change line B to read: printf(\"ptr + %d = %d\\n\",i, *ptr++); and run it again… then change it to: printf(\"ptr + %d = %d\\n\",i, *(++ptr)); and try once more. Each time try and predict the outcome and carefully look at the actual outcome. In C, the standard states that wherever we might use \u0026var_name[0] we can replace that with var_name, thus in our code where we wrote: ptr = \u0026my_array[0]; we can write: ptr = my_array; to achieve the same result. This leads many texts to state that the name of an array is a pointer. I prefer to mentally think “the name of the array is the address of first element in the array”. Many beginners (incl","date":"2023-11-11","objectID":"/pointerp2/:0:0","tags":["Pointer","C"],"title":"CHAPTER 2: Pointer types and Arrays","uri":"/pointerp2/"},{"categories":["code"],"content":"This article shows the concept of Pointer and how it works.","date":"2023-11-11","objectID":"/pointerp3/","tags":["Pointer","C"],"title":"CHAPTER 3: Pointers and Strings","uri":"/pointerp3/"},{"categories":["code"],"content":"This article shows the concept of Pointer and how it works P3. The study of strings is useful to further tie in the relationship between pointers and arrays. It also makes it easy to illustrate how some of the standard C string functions can be implemented. Finally it illustrates how and when pointers can and should be passed to functions. In C, strings are arrays of characters. This is not necessarily true in other languages. In BASIC, Pascal, Fortran and various other languages, a string has its own data type. But in C it does not. In C a string is an array of characters terminated with a binary zero character (written as ’\\0’). To start off our discussion we will write some code which, while preferred for illustrative purposes, you would probably never write in an actual program. Consider, for example: char my_string[40]; my_string[0] = 'T'; my_string[1] = 'e'; my_string[2] = 'd': my_string[3] = '\\0'; While one would never build a string like this, the end result is a string in that it is an array of characters terminated with a nul character. By definition, in C, a string is an array of characters terminated with the nul character. Be aware that “nul” is not the same as “NULL”. The nul refers to a zero as defined by the escape sequence ’\\0’. That is it occupies one byte of memory. NULL, on the other hand, is the name of the macro used to initialize null pointers. NULL is #defined in a header file in your C compiler, nul may not be #defined at all. Since writing the above code would be very time consuming, C permits two alternate ways of achieving the same thing. First, one might write: char my_string[40] = {'T', 'e', 'd', '\\0',}; But this also takes more typing than is convenient. So, C permits: char my_string[40] = \"Ted\"; When the double quotes are used, instead of the single quotes as was done in the previous examples, the nul character ( ’\\0’ ) is automatically appended to the end of the string. In all of the above cases, the same thing happens. The compiler sets aside an contiguous block of memory 40 bytes long to hold characters and initialized it such that the first 4 characters are Ted\\0. Now, consider the following program: ------------------program 3.1------------------------------------- /* Program 3.1 from PTRTUT10.HTM 6/13/97 */ #include \u003cstdio.h\u003e char strA[80] = \"A string to be used for demonstration purposes\"; char strB[80]; int main(void) { char *pA; /* a pointer to type character */ char *pB; /* another pointer to type character */ puts(strA); /* show string A */ pA = strA; /* point pA at string A */ puts(pA); /* show what pA is pointing to */ pB = strB; /* point pB at string B */ putchar('\\n'); /* move down one line on the screen */ while(*pA != '\\0') /* line A (see text) */ { *pB++ = *pA++; /* line B (see text) */ } *pB = '\\0'; /* line C (see text) */ puts(strB); /* show strB on screen */ return 0; } --------- end program 3.1 ------------------------------------- In the above we start out by defining two character arrays of 80 characters each. Since these are globally defined, they are initialized to all ’\\0’s first. Then, strA has the first 42 characters initialized to the string in quotes. Now, moving into the code, we declare two character pointers and show the string on the screen. We then “point” the pointer pA at strA. That is, by means of the assignment statement we copy the address of strA[0] into our variable pA. We now use puts() to show that which is pointed to by pA on the screen. Consider here that the function prototype for puts() is: int puts(const char *s); For the moment, ignore the const. The parameter passed to puts() is a pointer, that is the value of a pointer (since all parameters in C are passed by value), and the value of a pointer is the address to which it points, or, simply, an address. Thus when we write puts(strA); as we have seen, we are passing the address of strA[0]. Similarly, when we write puts(pA); we are passing the same address, since we have set pA = strA; Given that,","date":"2023-11-11","objectID":"/pointerp3/:0:0","tags":["Pointer","C"],"title":"CHAPTER 3: Pointers and Strings","uri":"/pointerp3/"},{"categories":["code"],"content":"This article shows the concept of Pointer and Array how it works.","date":"2023-11-07","objectID":"/1darraysinc/","tags":["Hackerrank"],"title":"1D Arrays in C","uri":"/1darraysinc/"},{"categories":["code"],"content":"This article shows the concept of Pointer and how it works. An array is a container object that holds a fixed number of values of a single type. To create an array in C, we can do int arr[n];. Here, arr, is a variable array which holds up to 10 integers. The above array is a static array that has memory allocated at compile time. A dynamic array can be created in C, using the malloc function and the memory is allocated on the heap at runtime. To create an integer array, arr of size n , int *arr = (int*)malloc(n * sizeof(int)), where arr points to the base address of the array.Sample Output 1in. Iterate the array calculating the sum of all elements. Print the sum and free the memory where the array is stored. While it is true that you can sum the elements as they are read, without first storing them to an array, but you will not get the experience working with an array. Efficiency will be required later. Input Format The first line contains an integer, n. The next line contains n space-separated integers. Constraints $1 \\leq n \\leq 1000$ $1 \\leq a[i] \\leq 1000$ Output format Print the sum of the integers in the array. Sample input 0 6 16 13 7 2 1 12 Sample output 0 51 Sample Input 1 7 1 13 15 20 12 13 2 Sample Output 1 76 Solution: #include \u003cstdio.h\u003e #include \u003cstring.h\u003e #include \u003cmath.h\u003e #include \u003cstdlib.h\u003e int main() { /* Enter your code here. Read input from STDIN. Print output to STDOUT */ int n,s = 0; scanf(\"%d\",\u0026n); int *arr = (int*)malloc(n * sizeof(int)); for (int i = 0; i \u003cn; i++){ scanf(\"%d\",\u0026arr[i]); s += arr[i]; } printf(\"%d\",s); return 0; } ","date":"2023-11-07","objectID":"/1darraysinc/:0:0","tags":["Hackerrank"],"title":"1D Arrays in C","uri":"/1darraysinc/"},{"categories":["confess"],"content":"This article shows my feelings when studying at HUST.","date":"2023-08-04","objectID":"/professortamhuyet/","tags":["confess"],"title":"A Nightmare Sunday in My Life","uri":"/professortamhuyet/"},{"categories":["confess"],"content":"This article shows my feelings when studying at HUST. Introduction ","date":"2023-08-04","objectID":"/professortamhuyet/:0:0","tags":["confess"],"title":"A Nightmare Sunday in My Life","uri":"/professortamhuyet/"},{"categories":["confess"],"content":"Overview As you may or may not know, HUST is a university with many excellent professors. But I have to admit, none of them work at full capacity as terrifyingly as she does. ","date":"2023-08-04","objectID":"/professortamhuyet/:1:0","tags":["confess"],"title":"A Nightmare Sunday in My Life","uri":"/professortamhuyet/"},{"categories":["confess"],"content":"Developments When I had to present the OOPs miniproject on July 24, 2023, people with their names listed last, like me, always felt very stressed and nervous. Why? Because Ms.Trang said each group should present for 20 minutes, but in reality, the first few groups had many questions and took an average of 1 hour for each group. There were a total of 23 groups! So I also guessed that I would only have my turn to present at around midnight on Monday, and that’s exactly what happened. Source: Cô Trang Source: Người nghiện Hút She also asked the last few groups if they needed to postpone our presentations to the next evening. I thought that would be terrible because at the moment, I still had some other miniprojects and a challenging final exam ahead. Of course, none of us wanted her to continue either because, at that time, it was already 9 pm, and she hadn’t even had dinner. However, for our own benefit, we naturally declined that idea, and we speedran until 1 am the next morning. She and all the students were able to complete the presentations for all 23 groups. (Is the peak of success achieved by sacrificing so much?) ","date":"2023-08-04","objectID":"/professortamhuyet/:1:1","tags":["confess"],"title":"A Nightmare Sunday in My Life","uri":"/professortamhuyet/"},{"categories":["study"],"content":"Sample article displaying basic mathematics concepts.","date":"2023-07-24","objectID":"/fundamentalmath1/","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 1)","uri":"/fundamentalmath1/"},{"categories":["study"],"content":"Sample article displaying basic mathematics concepts. To start learning Machine Learning or Data Science, learners will be overwhelmed by the vast amount of knowledge related to Mathematics. This is quite natural because Mathematics is the foundation for any modern Science field. A solid foundation in mathematics behind the algorithms will give you a significant advantage when conducting research and working in the field of Data Science. Moreover, businesses are willing to spend a lot of money on technology inside machines rather than operators who have no deep knowledge of them. Do you understand this point? To delve deeper, we can imagine a common scientific process in audio processing as follows: Information extraction, physical characteristics of sound, and modeling the sound formation process. Building hypotheses about them. Estimating data source quality. Quantifying data uncertainty and predictions. Determining hidden patterns from the information flow. Exploring and understanding the limits of a model. Studying the abstract mathematical and logical evidence behind it. So, we can see that the nature of Data Science is not tied to a specific field or topic but can address various diverse issues and phenomena such as cancer diagnosis or weather forecasting. 1) Understanding Variables, Functions, Equations, and Graphs The basic Mathematics we usually learn from secondary school onwards. Let’s summarize some basic foundations: Logarithmic functions, exponential functions, polynomial functions, rational numbers. Geometry and basic theorems, knowledge of trigonometry. Real numbers and complex numbers with basic properties. Knowledge of sequences, sums, inequalities. Drawing and representing graphs, knowledge of Descartes coordinates and polar coordinates, conic sections. ","date":"2023-07-24","objectID":"/fundamentalmath1/:0:0","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 1)","uri":"/fundamentalmath1/"},{"categories":["study"],"content":"How to apply this knowledge? For programmers, we have all learned about search and sorting algorithms. If you have not encountered them yet, I can explain as follows: Search algorithms are like finding your seat number in the exam room from the list. Sorting algorithms simply arrange elements in the list in ascending and descending order. The speed of execution depends on various factors such as data set size, algorithm complexity, … Thus, if I apply them to optimize searching in a database with tens of millions of items, it will not be difficult for us to encounter the “Binary Search” concept. However, if you want to optimize the program, we should not just sit there and apply the existing source code for testing, right? ^^ To make a search program optimal, we need to understand the concept of logarithm and equation repetition. Through computing during logarithm execution time, you can imagine the appropriate search space for the algorithm to build the appropriate data structure. That’s why “Binary Search” always comes in various versions with increasing performance. Refer to the Binary search Algorithm: https://en.wikipedia.org/wiki/Binary_search_algorithm ","date":"2023-07-24","objectID":"/fundamentalmath1/:0:1","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 1)","uri":"/fundamentalmath1/"},{"categories":["study"],"content":"Where can you supplement mathematics knowledge? Bssic Website Machine Learning : https://machinelearningcoban.com/math/#luu-y-ve-ky-hieu Data Science Math Skills - Coursera: https://www.coursera.org/learn/datasciencemathskills Introduction to Algebra - edX: https://www.edx.org/course/introduction-algebra-schoolyourself-algebrax-1 Algebra I - Khan Academy: https://www.khanacademy.org/math/algebra Note: You can apply for Financial Aid to learn for free and obtain certificates from Coursera. Ad has successfully applied for Financial Aid for 2 courses. ^^ ","date":"2023-07-24","objectID":"/fundamentalmath1/:0:2","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 1)","uri":"/fundamentalmath1/"},{"categories":["study"],"content":"2) Statistics Knowledge By now, many people often think that Statistics is mainly related to Economics. But perhaps you will be truly surprised because they are closely related to Data Science. It can be said that if you are in the field of Data Science, understanding Statistics and Probability is essential. In a conversational way, we also have a formula: Data Science = Big Data + Statistics + Computer Science And now, in Vietnam, we always have many practical issues. With such a broad topic, planning is extremely important to ensure that we always cover everything: Summarize data and descriptive statistics, central tendencies, variances, covariances. Basic probability: fundamental, expectation, probability calculation, Bayes’ theorem, conditional probability. Probability distribution functions: uniform, normal, binomial, quadratic, central limit theorem. Sampling, measurement, random number generation. Hypothesis testing and confidence, error,… Linear regression, regularization techniques. ","date":"2023-07-24","objectID":"/fundamentalmath1/:0:3","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 1)","uri":"/fundamentalmath1/"},{"categories":["study"],"content":"How to apply this knowledge? The knowledge of Mathematics, Statistics, … is the difference in the mindset of a Data Scientist. Your task is to ask questions and thoroughly investigate the real problems you need to solve. Once the problem is determined, you will proceed to collect data and analyze it carefully, similar to Sherlock Holmes. With knowledge of Mathematics and Statistics, you can set hypotheses about the data you are examining or predict results from hypotheses. You will not stop at that but continuously form new questions to analyze the data accurately. ","date":"2023-07-24","objectID":"/fundamentalmath1/:0:4","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 1)","uri":"/fundamentalmath1/"},{"categories":["study"],"content":"Where can you supplement Statistics knowledge? Statistics and Probability in Data Science using Python - edX: https://courses.edx.org/courses/course-v1:UCSanDiegoX+DSE210x+3T2017/course/ Data Science - D2Academics: https://d2academics.thinkific.com/courses/take/data-science/ Statistics with R Specialization - Coursera: https://www.coursera.org/specializations/statistics Business Statistics and Analysis Specialization - Coursera: https://www.coursera.org/specializations/business-statistics-analysis (Sách tiếng Việt) Phân Tích Dữ Liệu Với R – Hỏi Và Đáp (Tái Bản 2018) - Nguyễn Văn Tuấn Through the first part of the Mathematics knowledge for Data Science, I hope that I can provide you with a little luggage on the road to becoming a real Data Scientist. The remaining mathematical knowledge will be addressed in the next part. Please follow me to stay updated on the latest posts! ","date":"2023-07-24","objectID":"/fundamentalmath1/:0:5","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 1)","uri":"/fundamentalmath1/"},{"categories":["study"],"content":"Sample article displaying basic mathematics concepts.","date":"2023-07-24","objectID":"/fundamentalmath2/","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 2)","uri":"/fundamentalmath2/"},{"categories":["study"],"content":"Sample article displaying basic mathematics concepts. Basic Mathematics for Data Science (Part 2) ","date":"2023-07-24","objectID":"/fundamentalmath2/:0:0","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 2)","uri":"/fundamentalmath2/"},{"categories":["study"],"content":"3) Linear Algebra Have you ever wondered how Facebook suggests friends or how Netflix always recommends movies tailored to your taste? These are examples of recommendation systems that use various algorithms to analyze user data and preferences in order to provide personalized suggestions. Here, we will apply linear algebra to dive deeper into understanding how machine learning algorithms work with data streams. This knowledge is essential for data scientists to analyze and process data in great detail. Let’s explore the fundamental concepts of linear algebra that you need to understand: Basic properties of matrices and vectors: scalar multiplication, linear transformations, transposition, adjugate, etc. Matrix multiplication rules and various algorithms, matrix inversion. Special matrices: square matrices, ideas of sparse and dense matrices, unit vectors, symmetric matrices, identity matrices, and more. Matrix factorization techniques: LU decomposition, Gaussian and Gauss-Jordan elimination, solving linear equations (Ax = b).b Basis of vector spaces, orthogonality, least squares. Eigenvalues and eigenvectors in matrices, diagonalization, Singular Value Decomposition (SVD). How is this knowledge applied? All neural network algorithms use linear algebra techniques to represent and manipulate network structures and train data. Linear algebra is also applied in image processing and real-world data manipulation. Where can you learn this? Linear algebra: foundations to frontiers - edX: https://courses.edx.org/courses/course-v1:UTAustinX+UT.5.05x+2T2017/course/ Mathematics for Machine Learning: Linear Algebra - Coursera: https://www.coursera.org/learn/linear-algebra-machine-learning Python cho Đại số Tuyến tính - Machine learning Cơ bản: https://fundaml.com/course/5990a766cdc6e32b3b4d0666/intro Kiến thức về Đại số Tuyến tính cũng được đề cập kết hợp quiz + assignment để kiếm tra kiến thức tại Week một khoá Machine Learning - Coursera: https://www.coursera.org/learn/machine-learning ","date":"2023-07-24","objectID":"/fundamentalmath2/:1:0","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 2)","uri":"/fundamentalmath2/"},{"categories":["study"],"content":"4) Calculus Calculus is often a daunting subject for students studying in the fields of Science and Engineering as well as Economics. Nevertheless, no matter how intimidating it may seem, calculus plays a vital role in Machine Learning and Data Science. Calculus is the foundation for fundamental analytical solutions, such as Linear Regression. Moreover, when building a machine learning algorithm to analyze and predict data hypotheses, calculus is crucial for finding the minimum error of the model and optimizing model accuracy. These are some of the basic concepts you need to grasp: Knowledge of one-variable functions, limits, continuity, differentiation. Mean value theorems, different indeterminate forms, L’Hôpital’s rule. Maximum and minimum values of functions. Product rule, Chain rule Taylor series, sum/integration of infinite series. Fundamental theorems and average value theorems of definite and indefinite integrals. Gamma and Beta functions. Knowledge of multivariable functions, limits, continuity, partial derivatives. Basic concepts of differential equations. How is this knowledge applied? Have you ever wondered how the Logistic Regression algorithm works? It uses a method called “Gradient Descent” to find the minimum loss function. To understand how it operates, you need to know concepts related to gradients, derivatives, function limits, and chain rules. By comprehending these, you can get a better grasp of how the algorithm works and can optimize it effectively. Logistic Regressionn Reference: https://machinelearningcoban.com/2017/01/27/logisticregression/ Where can you enhance your knowledge of calculus? Pre-university calculus - edX: https://www.edx.org/course/pre-university-calculus Calculus I - Khan Academy: https://www.khanacademy.org/math/calculus-1 Mathematics for machine learning: Multivariable calculus - Coursera: https://www.coursera.org/learn/multivariate-calculus-machine-learning ","date":"2023-07-24","objectID":"/fundamentalmath2/:2:0","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 2)","uri":"/fundamentalmath2/"},{"categories":["study"],"content":"5) Discrete Math Data Science nowadays relies heavily on computational systems, and Discrete Math is at the core of these systems. Discrete Math includes vital concepts that are essential for everyday use of algorithms and data structures in analytical projects: Learning about counting principles, combinations, etc. Understanding basic proof techniques. Essential concepts of logic, induction, and propositions. Grasping basic data structures: stacks, queues, graphs, arrays, hash tables, trees. Fundamental graph concepts and applications. Recurrence relations How is this knowledge applied? For example, when analyzing social media user behavior, you can model the data as attributes in a graph structure. You might need to study the fastest algorithms to search and traverse nodes in a graph, which Discrete Math helps with. Understanding different complexities of algorithms for various spaces and times will aid you in selecting the appropriate algorithm for your problem. Where can you learn Discrete Mathematics? Introduction to Discrete Mathematics for Computer Science Specialization - Coursera: https://www.coursera.org/specializations/discrete-mathematics Master discrete mathematics: sets, math logic, and more - Coursera: https://www.udemy.com/master-discrete-mathematics/ Introduction to Mathematical Thinking - Coursera: https://www.coursera.org/learn/mathematical-thinking Note: I have successfully applied for Financial Aid for the “Introduction to Mathematical Thinking” course on Coursera. If you need more information, feel free to reach out to me. Conclusion Becoming a Data Scientist is a long journey of learning and developing both knowledge and mindset. You will find that moving from a problem to practical applications is always a significant challenge. Moreover, it comes with a great deal of responsibility when you are entrusted with a business’s success. This is because making even a small mistake can pose a significant risk. Never stop asking questions and strive to apply your knowledge to find the most suitable and optimal solutions. In the current integration phase of Vietnam, opportunities are within your reach if you put in the effort. ","date":"2023-07-24","objectID":"/fundamentalmath2/:3:0","tags":["math","data science","probability and statistic"],"title":"Basic Mathematics for Data Science (Part 2)","uri":"/fundamentalmath2/"},{"categories":["Football"],"content":"An analysis of the Football World.","date":"2023-07-24","objectID":"/footballanalysis/","tags":["football","analysis"],"title":"Data Science in Football and Success from Liverpool F.C","uri":"/footballanalysis/"},{"categories":["Football"],"content":"An analysis of the Football World Can Data Science can be applied in Football Analysis? Football is increasingly being analyzed and predicted through meaningful statistics. If you’re a true sports fan, you’ll find that these numbers are far from unfamiliar! Undoubtedly, data is a big concern in football. It’s not an easy task to record every event that occurs in a match. But in reality, this is changing as every action on the field is being recorded and represented in the most visual way. Today, you can delve into detailed statistics of matches through every recorded event, and the figures are likely to be mentioned by commentators in discussions about a team’s win-loss streak or the number of successful passes. Even more astonishing is how technology can intervene in the process of analyzing statistics, player form, and performance to help coaching staff prepare the right personnel for each competition. A simple example is the very basic statistics from Optasports.com since 2006, such as ball touches, passes, shots, and so on. As of now, they have accumulated tens of thousands of visually represented data points for each competition, team, match, and player. From a Classification problem in Machine Learning, we can now apply these techniques to track player movements during the process of creating goals. As a result, algorithms stemming from the football analysis and statistics field have emerged, such as ’expected goals,’ ‘goal-scoring efficiency,’ ‘winning percentage,’ and more. ","date":"2023-07-24","objectID":"/footballanalysis/:0:0","tags":["football","analysis"],"title":"Data Science in Football and Success from Liverpool F.C","uri":"/footballanalysis/"},{"categories":["Football"],"content":"Returning to the historic championship of Liverpool F.C. To kickstart their dream of ending a long-awaited title drought, Liverpool F.C. was ready with Sporting Director Michael Edwards and an investment in building a data research team as early as 2012. Leading this team was Ian Graham, a Ph.D. in Physics from the University of Cambridge, along with several other members holding Ph.D. degrees. More importantly, all of them had a deep understanding of football. Through detailed player potential analysis, Liverpool acquired talents like Mane, Firmino, Van Dijk, Alisson, and, most notably, the talented Egyptian player Mohamed Salah. Salah, who had previously faced skepticism after a less successful stint at Chelsea, was brought to the club for £45 million, despite the doubts (Chelsea being one of the giants in the English Premier League and a rival of Liverpool). Ian Graham recommended Liverpool to sign Salah based on his data showing that he would combine exceptionally well with Firmino, another forward for Liverpool. In the following season (17-18), Salah turned those anticipated goals into actual achievements. He shattered Premier League records by scoring 32 times and became an emblem of Liverpool’s resurgence. Were you surprised when Trent-Alexander Arnold’s corner kick helped Divock Origi secure a 4-0 victory over Barca in the Champions League semi-final second leg? To have a newcomer come on the field and score so quickly must have stemmed from the precise analysis of Liverpool’s data research team, right? Perhaps building the foundation for football development combined with Science and Technology is becoming an essential part of modern football development? This is likely why, according to a report by the Financial Times, Liverpool F.C. is at the forefront of data analysis application in football. If you want to learn more about Liverpool’s data analysis team, you can refer to: https://trainingground.guru/staff-profiles/liverpool-staff-profiles ","date":"2023-07-24","objectID":"/footballanalysis/:1:0","tags":["football","analysis"],"title":"Data Science in Football and Success from Liverpool F.C","uri":"/footballanalysis/"},{"categories":["Football"],"content":"Conclusion Data Science can undoubtedly be applied in football because sports are a domain where the impact of data is immediately visible to everyone. If you aspire to engage in sports data analysis, I believe that this field will demand a significant workforce in the future. Who knows, you might become a Data Analyst for the Vietnam National Team and indirectly contribute to our first-ever participation in the World Cup? However, always remember that if football is a puzzle piece, we can easily fit data into an algorithm and know what to do. Yet, this sport is always full of intriguing variables that turn the impossible into the possible. Sometimes, a perfect plan can be thwarted by an imperfect one. But that’s perhaps how probabilities work, no matter how carefully we predict and consider, there may still be room for error. Unachieved outcomes might sometimes leave analysts scratching their heads, but that’s what makes the game perpetually exciting. And as the ball rolls, there will be millions of data points collected… ","date":"2023-07-24","objectID":"/footballanalysis/:2:0","tags":["football","analysis"],"title":"Data Science in Football and Success from Liverpool F.C","uri":"/footballanalysis/"},{"categories":["Football"],"content":"Here are some reference links for football statistics/data analysis that I have compiled: Advance Football Analytic: http://www.advancedfootballanalytics.com/ Opta: https://www.optasports.com/ Football Outsiders: https://www.footballoutsiders.com/ Anfield Index: https://anfieldindex.com Total Football Analysis: https://totalfootballanalysis.com/ Note: This article includes aggregated images and some links from various news and football analysis sources, both domestic and international. The primary purpose is to facilitate knowledge sharing. ","date":"2023-07-24","objectID":"/footballanalysis/:2:1","tags":["football","analysis"],"title":"Data Science in Football and Success from Liverpool F.C","uri":"/footballanalysis/"},{"categories":["study"],"content":"Sample article demonstrating basic LaTeX syntax.","date":"2023-07-24","objectID":"/introtolatex/","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"Sample article demonstrating basic LaTeX syntax. 1. What is LATEX? LaTeX is a document markup language that allows users to create high-quality documents with consistent and structured text. It is commonly used by students, educators, and researchers in scientific and technical fields, as well as various other domains. LaTeX has its precursor in TeX, a formatting language created by Donald Knuth, which was quite challenging to use. Subsequently, Leslie Lamport developed LaTeX based on TeX, introducing numerous improvements and making it popular to this day. The hallmark of LaTeX is its focus on encouraging users to concentrate on content creation while leaving the formatting to the computer[1]. 2. Exploring LaTeX ","date":"2023-07-24","objectID":"/introtolatex/:0:0","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"2.1. Benefits of LaTeX LaTeX offers consistency: line spacing, font size, colors, formatting, and more, allowing you flexibility when switching to different documents. It automates many tasks: chapter numbering, header creation, table and image generation, references, and more. Automatic and consistent citation of reference documents with a neat presentation format. LaTeX enables easy rendering of mathematical equations, for example: $$E = \\frac{mc^2}{\\sqrt{1-\\frac{v^2}{c^2}}}$$ LaTeX is efficient for working on large projects, allowing you to format hundreds or thousands of pages within a single low-sized .tex file for easy document management. LaTeX now has a vast library of packages that aid users in various tasks such as adding footnotes, creating diagrams, generating tables, and more. LaTeX also has specialized packages for scientific paper writing, presentations, and spreadsheet functionality. Image 01: One of the benefits LaTeX provides is ease of text formatting. ","date":"2023-07-24","objectID":"/introtolatex/:1:0","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"2.2. Disadvantages of LaTeX. It takes time to build a consistent structure for documents, such as formatting for scientific papers. Writing in LaTeX can be somewhat akin to programming, making it time-consuming when dealing with minor errors. Learning and becoming proficient in LaTeX requires a significant time investment. ","date":"2023-07-24","objectID":"/introtolatex/:2:0","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"2.3. Some LaTeX Editors to Consider. MiKTeX (Bundle) (Windows) Overleaf (Collaborative Online Editor) Mactex (Bundle) (Mac) Texlive (Bundle) (Linux) Lyx (Bundle \u0026 Editor) (Windows, Mac, Linux) Texmaker (Windows, Mac, Linux) In this article, we will delve into the detailed usage of LaTeX through the Overleaf editor. To get started, you can access Overleaf right here. Image 02: The LaTeX Editing Environment on Overleaf. 3. Learn about Overleaf. ","date":"2023-07-24","objectID":"/introtolatex/:3:0","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"3.1. Key Features of Overleaf. Overleaf is a free, web-based collaborative LaTeX editor. Overleaf has several distinctive and truly useful features for anyone needing to write and collaborate with various stakeholders. In this blog, If you are not already familiar with LaTeX please refer to some basic LaTeX syntax at here. After that, I will provide you with a basic standard for text composition with LaTeX. Don’t hesitate to copy the LaTeX code snippets and make gradual adjustments to familiarize yourself! ","date":"2023-07-24","objectID":"/introtolatex/:4:0","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"3.2. Creating a LaTeX Project on Overleaf. Above all, I still encourage you to learn how to use LaTeX. LaTeX is not at all difficult to learn, and there is virtually endless information and guidance available on the internet about using LaTeX. You don’t need to be an expert in LaTeX (although some commands and usage will be necessary), and you will have an excellent system to automate the organization of your writing. Let’s explore the following steps together. ","date":"2023-07-24","objectID":"/introtolatex/:5:0","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"Step 1 - Register an Account on Overleaf To use Overleaf, you’ll need to create an account. You can access and register here. ","date":"2023-07-24","objectID":"/introtolatex/:6:0","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"Bước 2 - Create a New Project After Registering on Overleaf When you log in, you will see a box labeled New Project. Click on this box to start creating a project. A project in Overleaf is a folder containing various files. If you’ve received a URL in your email from someone with a document, and you’re asked to click on the URL to access the document, you already have a document to work on. So, just logging in will take you to that document. When you click on New Project, you will see a number of standard templates that Overleaf has prepared for you, such as the Sample Project. However, we should begin with a Blank Project to get a better understanding of LaTeX operations on Overleaf. Ảnh 03: Basic Text Editing Environment on Overleaf. Let’s go through it from left to right: At the top, you’ll see the Menu - this contains functions like Download project, copy project, word count, headings, Git/Dropbox integration, and advanced settings. Also on the left, you’ll find a sidebar that resembles a file manager. By default, you select and compile the main.tex file. You can upload additional text documents or images. Next to it, occupying about half of the screen is the LaTeX document display with two options: Source or Rich Text. The right half of the screen displays the output when you export to PDF format. The document will be compiled and displayed automatically. You can choose Recompile to manually update if needed. Under Recompile, you can also choose between turning on/off automatic compilation, fast compile (draft mode with quick saving), normal compile, or syntax check before compilation. The next button to focus on is the Download PDF button - the second white icon from Recompile. This button quickly saves the document as a PDF. At the top-right corner, you’ll find the Share button - you can select Turn on link sharing to allow anyone with the link to access and edit the document. If it’s a private document, you can invite collaborators manually via email. Next to the Share button, you’ll find the Submit button - this allows you to submit your document directly to reputable scientific conferences and journals. It’s one of the unique features of Overleaf. With the History button next to the Share button, you can view the editing history of the document - suitable for backup needs. The last button, Chat - this is where you can communicate with collaborators. This keeps you focused on Overleaf instead of having to choose a third-party tool for group communication. ","date":"2023-07-24","objectID":"/introtolatex/:7:0","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"3.2.1. About the File Manager Panel in Overleaf. Overleaf provides you with a file manager to store the files you will use in your writing process. These files can be text documents or images (remember to upload PDF documents, images, or text). You can also create new folders where you can store your files. Note: If your project contains many images, you can create separate folders to keep your images organized. In this guide, we will work with the main.tex file that has been pre-created. ","date":"2023-07-24","objectID":"/introtolatex/:7:1","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"3.2.2. Understanding the Centre Panel Think of this area as the primary editing workspace. The Centre Panel will provide you with all the tools and some constraints for editing. The menu items here do not include buttons to insert images, tables, or citations. Instead, you must use LaTeX code. To have a clearer picture, let’s design a workflow for the main.tex file. ","date":"2023-07-24","objectID":"/introtolatex/:7:2","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"3.2.3. Some Notes When Writing in LaTeX In general, academic documents such as research papers, scholarly articles, etc., often have common structures, including: Metadata: This is where you provide the title, author information, date, and other basic details. In LaTeX, you can think of this as the Front Matter. In Overleaf, we place the front matter at the beginning of the main.tex file. We’ll explore this in more detail when we switch to the Source view to see the document. Table and figures: Most academic documents will contain information in the form of tables and figures. If you have many tables and figures, it’s a good practice to place them in separate files with names like fig.tex and frames.tex. This way, you can reference them from within the document, or you can copy and paste the code for tables and figures from those files into the specific part of the document you’re writing. Citiation: As the saying goes, “Quoting a book is like carrying a testimony.” Using references and citing them demonstrates respect for the authors who have written and cleverly used recognized knowledge to support your argument. ","date":"2023-07-24","objectID":"/introtolatex/:7:3","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"4. Building the First Document on Overleaf You can access My Overleaf project, copy this piece of code, and paste it into your Overleaf link: https://www.overleaf.com/read/yhkrqpqdhcbj Important Note: Choose the XeLaTeX compiler if you want to test the code snippets. ","date":"2023-07-24","objectID":"/introtolatex/:8:0","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"4.1. Regarding the introduction section, which includes the title of the article and the necessary LaTeX packages First, you will choose the appropriate document type. For example, here, you choose the document type suitable for writing a scientific research paper on A4-sized paper. \\documentclass[a4paper]{article} List of packages used when editing. In the code block below, there are many % signs - When you list them at the beginning of a line, that line becomes a comment. With comments, they will only appear in the editing window and will not be included in the final PDF file. % These packages help us type in Vietnamese on LaTeX. \\usepackage[utf8]{inputenc} % These packages help us insert images on LaTeX \\usepackage{graphicx} % This is the path to image folder where I created \\graphicspath{ {./images/} } Next, we will list the title of the article, author’s name, and the current date here. You can proceed to change the values below. \\title{A Sample Document} \\author{Turio} \\date{\\today} ","date":"2023-07-24","objectID":"/introtolatex/:8:1","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"4.2. Building the main content So we have completed the introduction section. We will now move on to the crucial part of LaTeX file creation. First, always remember the following syntax: % This line of code acts as a gateway to start building your document. \\begin{document} % After listing the introductory information, you'll declare it here. \\maketitle % \\his command makes it easy to switch to a new page. - It's listed here because a standard report often dedicates a full page to the cover page. \\newpage % ... You can refer to other lines of code on the provided Overleaf link for additional details. % This line of code is used to end the document; if it's missing, the document will result in an error. \\end{document} ","date":"2023-07-24","objectID":"/introtolatex/:8:2","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"4.3. Now, let’s build chapters and an automatic table of contents. To create a table of contents, use the following syntax: \\tableofcontents \\newpage To declare chapters, use \\section, \\subsection, and the special thing about LaTeX is that they will automatically update the table of contents. \\section{Chapter 1} \\subsection{Subchapter of chapter 1} % Subchapters of Chapter 1 can be declared the same way. With chapters added, the table of contents will be automatically updated like this: ","date":"2023-07-24","objectID":"/introtolatex/:8:3","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"4.4. Adding images on Overleaf To add images, follow these steps: Add the image to your Overleaf project. You can create a folder for better organization, as demonstrated below, where I created a folder called images to store all the images. Use the following code to add the image to LaTeX: % This is the simplest approach to adding images to LaTeX. % For more detailed adjustments, consult LaTeX documentation. \\begin{figure}[ht] \\includegraphics[width=\\textwidth]{name_of_the_file} \\end{figure} ","date":"2023-07-24","objectID":"/introtolatex/:8:4","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"4.5. Insert table on Overleaf Building a sample table can be done using the code below. http://www.tablesgenerator.com/ to create a table and then copy the LaTeX code from the website into your document. ","date":"2023-07-24","objectID":"/introtolatex/:8:5","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"4.6. Creating a bibliography and citations in Overleaf We will build the bibliography and citation in Overleaf can be accomplished with the following code: \\begin{thebibliography}{2} \\bibitem{doc1} Author name, \\emph{Tài liệu 1}. Publication. \\bibitem{doc2} Author name, \\emph{Tài liệu 2}. Publication. \\end{thebibliography} With a bibliography in place, you can use the \\cite{The document name is listed in \\bibitem} command to cite sources in your document. ","date":"2023-07-24","objectID":"/introtolatex/:8:6","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"5. Conclusion Every text editor has its own pros and cons. However, if you are heading into research or planning to write academic papers in the future, LaTeX is a suitable choice. Alongside LaTeX, Overleaf is a powerful companion with its online collaborative editing features, helping you connect and work with other project members. Team ","date":"2023-07-24","objectID":"/introtolatex/:9:0","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["study"],"content":"References: [1] LateX online course compiled by Dr John Lees-Miller and present in Bristol University. [2] How to use Overleaf to Write your papers - Arindam Basu. ","date":"2023-07-24","objectID":"/introtolatex/:10:0","tags":["latex"],"title":"Introduction to LATEX","uri":"/introtolatex/"},{"categories":["Machine Learning"],"content":"Sample article demonstrating basic model of Machine Learning datasets.","date":"2023-07-24","objectID":"/weka/","tags":["Weka","Machine Learning"],"title":"Introduction to Weka","uri":"/weka/"},{"categories":["Machine Learning"],"content":"Sample article demonstrating basic Markdown syntax and HTML element formatting. Building a Basic Classification Machine Learning Model with Weka Don’t think that Machine Learning is only for experts. If you’re a learner or a non-expert looking to dive into Machine Learning, Weka is a great choice. Weka is a collection of machine learning algorithms for data mining tasks. It includes tools for data preparation, classification, regression, clustering, association rules, and visualization. Weka is open-source software distributed under the GNU General Public License. The product is developed by the Machine Learning research group at the University of Waikato, New Zealand. Notably, Weka also supports deep learning. You can explore more about Weka here. ","date":"2023-07-24","objectID":"/weka/:0:0","tags":["Weka","Machine Learning"],"title":"Introduction to Weka","uri":"/weka/"},{"categories":["Machine Learning"],"content":"Why Choose Weka? A significant benefit of using Weka is its extensive support for various machine learning algorithms. The more algorithms, the better for understanding your problem and comparing different algorithms easily. One of the highlights is that Weka already has algorithms that allow us to approach the Titanic Case Study more visually. In this context, we’ll explore three basic classification algorithms: K-Nearest Neighbor, Naive Bayes, and Decision Tree. ","date":"2023-07-24","objectID":"/weka/:1:0","tags":["Weka","Machine Learning"],"title":"Introduction to Weka","uri":"/weka/"},{"categories":["Machine Learning"],"content":"Understanding the Titanic Case Study On April 15, 1912, on its maiden voyage, the Titanic sank after colliding with an iceberg, claiming 1502 out of 2224 passengers and crew. This tragic event shocked the international community and led to improved safety regulations for ships. While luck played a role in survival after the Titanic disaster, certain groups, such as women, children, and the upper class, had higher survival chances. In this case study, we will analyze the types of people likely to survive. Specifically, we will use machine learning tools to predict which passengers survived the disaster. You can learn more about this case study and get the data here. Input From the original data, I will simplify it. I filtered out some important attributes and modified attribute names that affect the survival (survived) of passengers on the Titanic. My input attributes will include: Attribute Definition Explanation class Ticket class - First, Second, or Third class. 1 = 1st, 2 = 2nd, 3 = 3rd gender Gender Standardized as 0 - Female and 1 - Male age Age 1 - Adult and 0 - Children survived Survival probability 0 - No and 1 - Yes If you want to test the normalized dataset from me, you can download it here. Output The output data is straightforward, providing predictions about the likelihood of survival for the remaining passengers based on known factors such as name, age, gender, the number of accompanying people, cabin location, etc. Significance This problem allows us to predict the survival chances of a person based on a disaster, enabling us to draw lessons for future journeys. This information can be used for designing safer ships, improving services, issuing warnings, and more. Analysis It’s evident that this is a Two-Class Classification problem with the output being survived or not. ","date":"2023-07-24","objectID":"/weka/:2:0","tags":["Weka","Machine Learning"],"title":"Introduction to Weka","uri":"/weka/"},{"categories":["Machine Learning"],"content":"How to Use Weka? I personally think using Weka is straightforward. You just need to install it and select a CSV file. Next, go to the “Classify” tab: Under “Classifier,” choose the algorithm you want to test. I will start with the K-Nearest Neighbor algorithm. In the test options, you can choose: Use training set: Use the entire dataset to train the model. Supplied test set: Provide an additional test set to evaluate the model. Cross-validation: Split the data into k subsets of equal size. In each iteration, one subset is used as the test set, and the rest are used for training. The value of k is usually set to 10. You can use either: + Leave-one-out: k equals the number of samples in the dataset (suitable for small datasets). + Stratified cross-validation: Uses sampling methods to ensure that class distribution is similar across all subsets. Percentage split: Split the data into training and test sets based on the percentage you want. Similarly, continue with the Decision Tree ID3 and Naive Bayes algorithms. I hope everyone has some interesting experiences with Weka. Before using it, don’t forget to appreciate the Computer Science Department at the University of Waikato, New Zealand, for bringing us such an excellent product! ","date":"2023-07-24","objectID":"/weka/:3:0","tags":["Weka","Machine Learning"],"title":"Introduction to Weka","uri":"/weka/"},{"categories":["Machine Learning"],"content":"More Information About Weka Details about the tool (including download links, documentation, and courses): https://www.cs.waikato.ac.nz/ml/weka/index.html To add ID3 Decision Tree to Weka: https://stackoverflow.com/questions/48888463/weka-3-8-package-installation-what-are-the-steps-to-add-id3 If you don’t see KNN in Lazy, choose the IBk classifier. An interesting article on model evaluation for those who are not familiar: https://ongxuanhong.wordpress.com/2015/08/25/danh-gia-mo-hinh-model-evaluation/ ","date":"2023-07-24","objectID":"/weka/:4:0","tags":["Weka","Machine Learning"],"title":"Introduction to Weka","uri":"/weka/"},{"categories":["C"],"content":"A challenges Hackerrank and its solution.","date":"2023-07-07","objectID":"/forloopinc/","tags":["Hackerrank","Conditionals and Loops","Easy"],"title":"For Loop in C","uri":"/forloopinc/"},{"categories":["C"],"content":"A challenges Hackerrank and its solution. Objective In this challenge, you will learn the usage of the for loop, which is a programming language statement which allows code to be executed until a terminal condition is met. They can even repeat forever if the terminal condition is never met. The syntax for the for loop is: for ( \u003cexpression_1\u003e ; \u003cexpression_2\u003e ; \u003cexpression_3\u003e ) \u003cstatement\u003e expression_1 is used for intializing variables which are generally used for controlling the terminating flag for the loop. expression_2 is used to check for the terminating condition. If this evaluates to false, then the loop is terminated. expression_3 is generally used to update the flags/variables. The following loop initializes i to 0, tests that i is less than 10, and increments i at every iteration. It will execute 10 times. for(int i = 0; i \u003c 10; i++) { ... } Task For each integer n in the interval [a,b] (given as input) : If \\(1 \\leq n \\leq 9\\), then print the English representation of it in lowercase. That is “one” for 1, “two” for 2, and so on. Else if \\(n \u003e 9\\) and it is an even number, then print “even”. Else if \\(n \u003e 9\\) and it is an odd number, then print “odd”. Input Format The first line contains an integer, a. The seond line contains an integer, b. Constraints \\(1 \\leq a \\leq b \\leq 10^6\\) Output Format Print the appropriate English representation,even, or odd, based on the conditions described in the ’task’ section. Note: \\([a,b] = {x \\in \\Zeta | a \\leq x \\leq b} = {a, a + 1, … , b}\\) Sample Input 8 11 Sample Output eight nine even odd Solution: #include \u003cstdio.h\u003e #include \u003cstring.h\u003e #include \u003cmath.h\u003e #include \u003cstdlib.h\u003e int main() { int a, b; scanf(\"%d\\n%d\", \u0026a, \u0026b); // Complete the code. for (int i = a; i \u003c= b;i++){ if (i == 1){ printf(\"one\"); } else if (i == 2){ printf(\"two\"); } else if (i == 3){ printf(\"three\"); }else if (i == 4){ printf(\"four\"); }else if (i == 5){ printf(\"five\"); }else if (i == 6){ printf(\"six\"); }else if (i == 7){ printf(\"seven\"); }else if (i == 8){ printf(\"eight\"); }else if (i == 9){ printf(\"nine\"); } if (i\u003e=1 \u0026\u0026 i\u003c=9){ printf(\"\\n\"); } } for (int i = 10; i \u003c= b;i++){ if (i%2==0){ printf(\"even\"); }else{ printf(\"odd\"); } printf(\"\\n\"); } return 0; } ","date":"2023-07-07","objectID":"/forloopinc/:0:0","tags":["Hackerrank","Conditionals and Loops","Easy"],"title":"For Loop in C","uri":"/forloopinc/"},{"categories":["code"],"content":"This article shows the solution of hackerrank challenges.","date":"2023-07-07","objectID":"/printingpatternusingloop/","tags":["C"],"title":"Printing Pattern Using Loops","uri":"/printingpatternusingloop/"},{"categories":["code"],"content":"This article shows the solution of hackerrank challenges. Print a pattern of numbers from 1 to n as shown below. Each of the numbers is separated by a single space. 4 4 4 4 4 4 4 4 3 3 3 3 3 4 4 3 2 2 2 3 4 4 3 2 1 2 3 4 4 3 2 2 2 3 4 4 3 3 3 3 3 4 4 4 4 4 4 4 4 Input Format The input will contain a single integer n. Constraint \\(1 \\leq n \\leq 100\\) Sample Input 0 2 Sample Output 0 2 2 2 2 1 2 2 2 2 Sample Input 1 5 Sample Output 1 5 5 5 5 5 5 5 5 5 5 4 4 4 4 4 4 4 5 5 4 3 3 3 3 3 4 5 5 4 3 2 2 2 3 4 5 5 4 3 2 1 2 3 4 5 5 4 3 2 2 2 3 4 5 5 4 3 3 3 3 3 4 5 5 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 Sample Input 2 7 Sample Output 2 7 7 7 7 7 7 7 7 7 7 7 7 7 7 6 6 6 6 6 6 6 6 6 6 6 7 7 6 5 5 5 5 5 5 5 5 5 6 7 7 6 5 4 4 4 4 4 4 4 5 6 7 7 6 5 4 3 3 3 3 3 4 5 6 7 7 6 5 4 3 2 2 2 3 4 5 6 7 7 6 5 4 3 2 1 2 3 4 5 6 7 7 6 5 4 3 2 2 2 3 4 5 6 7 7 6 5 4 3 3 3 3 3 4 5 6 7 7 6 5 4 4 4 4 4 4 4 5 6 7 7 6 5 5 5 5 5 5 5 5 5 6 7 7 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 Solution: #include \u003cstdio.h\u003e #include \u003cstring.h\u003e #include \u003cmath.h\u003e #include \u003cstdlib.h\u003e int arr[10000][10000]; int n; void init() { for (int i = 0; i \u003c 2*n-1;i++) { for (int j = 0; j \u003c 2*n-1;j++) { arr[i][j] = -1; } } } void changerow(int row) { for (int c = row;c \u003c (2*n - 1 - row);c++) { if (arr[row][c] == -1) { arr[row][c] = n - row; arr[2*n - 1 - row - 1][c] = n - row; } } } void changecol(int col) { for (int r = col;r \u003c (2*n -1 - col);r++) { if (arr[r][col] == -1) { arr[r][col] = n - col; arr[r][2*n - 1 - col - 1] = n - col; } } } void solution() { for (int i = 0;i\u003c 2*n -1;i++) { for (int j = 0; j \u003c 2*n - 1;j++) { printf(\"%d \", arr[i][j]); } printf(\"\\n\"); } } int main() { scanf(\"%d\", \u0026n); // Complete the code to print the pattern. init(); for (int i = 0; i \u003c n;i++) { changerow(i); changecol(i); } solution(); return 0; } ","date":"2023-07-07","objectID":"/printingpatternusingloop/:0:0","tags":["C"],"title":"Printing Pattern Using Loops","uri":"/printingpatternusingloop/"},{"categories":null,"content":"Hugo, the world's fastest framework for building websites","date":"2019-02-28","objectID":"/about/","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"About me My name is Tuan, a junior student at Ha Noi University of Science and Technology. I am studying Cyber Security and I am passionate about protecting people and organizations from cyber threats. Why I chose Cyber Security: I have been interested in Cyber Security since I was a child, when I first learned about cyberattacks and their consequences. I was fascinated by how cyberattacks work and how they can be prevented. I learned more about Cyber Security and decided to pursue it as a career. My experience in Cyber Security: I have taken many courses and internships related to Cyber Security. I have had the opportunity to work on a number of real-world projects. My dream in Information Security: I am excited to learn more about Cyber Security and I hope to be able to use my knowledge and skills to make a difference in the world. I believe that Cyber Security is an important field and I want to be a part of the solution. Notes: This is my CV \u003c!DOCTYPE html\u003e My CV Hope someone can give me some suggestions so that I can improve my knowledge and social skills. Contact Me: If you would like to know more about me or Cyber Security, please contact me via email ","date":"2019-02-28","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"}]